Directory Structure:
===================

README.md
assets
├── ImageUpload.png
├── Ingredients.png
└── Recipes.png
backend
├── api
    └── routes.py
├── config.py
├── main.py
├── models
    ├── ingredients.py
    └── recipes.py
├── prompts
    └── recipe_prompt.py
    └── vision_prompt.py
└── services
    ├── azure_blob_service.py
    ├── azure_openai_client.py
    └── recipe_service.py
    └── vision_service.py
└── utils
    └── image_utils.py
kitchen-copilot-frontend
├── README.md
├── components.json
├── eslint.config.mjs
├── next-env.d.ts
├── next.config.ts
├── package.json
├── postcss.config.mjs
└── public
    ├── file.svg
    ├── globe.svg
    ├── next.svg
    ├── vercel.svg
    └── window.svg
└── setup.md
└── src
    ├── app
        ├── api
        ├── demo
            └── page.tsx
        ├── favicon.ico
        ├── fridge-app
            └── page.tsx
        ├── globals.css
        ├── layout.tsx
        └── page.tsx
    ├── components
        ├── Footer.tsx
        ├── MobileNav.tsx
        ├── Navbar.tsx
        ├── kitchen
            ├── ImageUpload.tsx
            ├── IngredientsDisplay.tsx
            └── RecipesDisplay.tsx
        └── ui
            ├── alert.tsx
            ├── avatar.tsx
            ├── badge.tsx
            ├── button.tsx
            ├── card.tsx
            ├── dialog.tsx
            ├── input.tsx
            ├── navigation-menu.tsx
            ├── progress.tsx
            ├── separator.tsx
            ├── sheet.tsx
            ├── tabs.tsx
            ├── theme-provider.tsx
            └── theme-toggle.tsx
    ├── lib
        ├── api-client.ts
        └── utils.ts
    └── types
        └── index.ts
└── tsconfig.json
requirements.in
requirements.txt
sample-images

File Contents:
=============

--- README.md ---
# Kitchen Copilot

An application that analyses your refrigerator contents through images and suggests recipes based on available ingredients.

![Kitchen Copilot Image Upload Interface](assets/ImageUpload.png)


## Features
- **Image Analysis**: Upload a photo of your fridge or food items to identify ingredients
- **Recipe Generation**: Get customized recipe suggestions based on identified ingredients
- **Cloud Storage**: All data is stored in Azure Blob Storage for reliability and scalability
- **Modern Frontend**: Interactive web interface for easy ingredient analysis and recipe browsing

## Requirements
- Python 3.8+
- Azure OpenAI API access with a deployed GPT-4 Vision model
- Node.js 18+ (for frontend)

## Setup

### Backend Setup
1. Clone the repository
2. Navigate to the project root
3. Install Python dependencies:
   ```bash
   pip install -r requirements.txt
   ```
4. Copy the `.env.example` file to `.env` and add your configuration details:
   ```
   # Azure OpenAI API settings
   AZURE_OPENAI_API_KEY=your_azure_openai_api_key
   AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com
   API_VERSION=2023-12-01-preview
   MODEL_NAME=your-gpt4-vision-deployed-model-name

   # Azure Blob Storage settings
   AZURE_STORAGE_CONNECTION_STRING=your_azure_storage_connection_string
   AZURE_STORAGE_CONTAINER=container01
   ```

### Frontend Setup
1. Navigate to the frontend directory:
   ```bash
   cd kitchen-copilot-frontend
   ```
2. Install dependencies:
   ```bash
   npm install
   ```
3. Create a `.env.local` file with:
   ```
   NEXT_PUBLIC_API_URL=http://localhost:5000
   ```

## Usage

### Running the Full Application
1. Navigate to the backend directory:
   ```bash
   cd backend

2. Start the backend API server:
   ```bash
   python main.py --host 0.0.0.0 --port 5000
   ```

3. In a separate terminal, start the frontend development server:
   ```bash
   cd kitchen-copilot-frontend
   npm run dev
   ```

3. Open [http://localhost:3000](http://localhost:3000) in your browser to access the application

#### API Endpoints
- `POST /analyze-image`: Upload and analyze a fridge image
- `GET /ingredients`: Get ingredients from the most recent analysis
- `POST /generate-recipes`: Generate recipe suggestions based on available ingredients
- `GET /recipes`: Get previously generated recipes

## Demo Mode

For development and testing purposes, you can visit [http://localhost:3000/demo](http://localhost:3000/demo) to see the frontend with pre-filled sample data, without needing to connect to the backend API.

## Using Postman with the API

You can easily test the API endpoints using Postman. Here's how to make requests to each endpoint:

### 1. Analyze Image Endpoint (POST /analyze-image)

1. Open Postman and create a new POST request to `http://localhost:5000/analyze-image`
2. In the request builder, select the "Body" tab
3. Select "form-data"
4. Add a key named "file" and change the type from "Text" to "File"
5. Click "Select Files" and choose an image of your refrigerator
6. Click "Send" to submit the request

Example response:
```json
{
  "status": "complete",
  "result": {
    "ingredients": {
      "Dairy": ["milk", "cheddar cheese", "yogurt"],
      "Produce": ["carrots", "lettuce", "tomatoes", "onions"],
      "Proteins": ["chicken breast", "eggs"],
      "Condiments": ["ketchup", "mayonnaise", "mustard"]
    }
  },
  "summary": {
    "total_count": 10,
    "categories": 4,
    "by_category": {
      "Dairy": 3,
      "Produce": 4,
      "Proteins": 2,
      "Condiments": 3
    }
  },
  "image_filename": "image_1743074276_5115e30c.jpg",
  "request_id": "fridge_1743074276_5115e30c"
}
```

### 2. Get Ingredients Endpoint (GET /ingredients)

1. Create a new GET request to `http://localhost:5000/ingredients`
2. Optionally, you can add a query parameter named "request_id" if you want to get ingredients from a specific analysis
   - The request_id is returned in the analyze-image response (e.g., "fridge_630cee49")
3. Click "Send" to submit the request

![Ingredients Analysis Display](assets/Ingredients.png)

Example response:
```json
{
  "ingredients": {
    "Dairy": ["milk", "cheddar cheese", "yogurt"],
    "Produce": ["carrots", "lettuce", "tomatoes", "onions"],
    "Proteins": ["chicken breast", "eggs"],
    "Condiments": ["ketchup", "mayonnaise", "mustard"]
  }
}
```

### 3. Get Recipes Endpoint (GET /recipes)

1. Create a new GET request to `http://localhost:5000/recipes`
2. Optionally, you can add a query parameter named "request_id" if you want to get recipes from a specific analysis
   - The request_id is returned in the analyze-image response (e.g., "fridge_630cee49")
3. Click "Send" to submit the request

![Recipe Suggestions Display](assets/Recipes.png)

Example response:
```json
{
  "items": [
    {
      "name": "Quick Chicken Salad",
      "total_ingredients": ["chicken breast", "lettuce", "tomatoes", "onions", "mayonnaise", "salt", "pepper"],
      "available_ingredients": ["chicken breast", "lettuce", "tomatoes", "onions", "mayonnaise"],
      "missing_ingredients": ["salt", "pepper"],
      "completeness_score": 71,
      "instructions": ["Step 1...", "Step 2..."],
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  "analysis": [
    {
      "recipe_name": "Quick Chicken Salad",
      "completeness": 71,
      "available_count": 5,
      "missing_count": 2,
      "total_ingredients": 7,
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  "ingredient_count": 10
}
```

### 4. Generate Recipes Endpoint (POST /generate-recipes)

1. Create a new POST request to `http://localhost:5000/generate-recipes`
2. In the request builder, select the "Body" tab
3. Select "raw" and choose "JSON" from the dropdown
4. Enter the request body:
   ```json
   {
     "num_recipes": 5,
     "request_id": "fridge_1743074276_5115e30c"
   }
   ```
   - Replace "fridge_1743074276_5115e30c" with the actual request_id from your analyze-image response
   - You can omit the request_id to use the most recent analysis
5. Click "Send" to submit the request

Example response:
```json
{
  "items": [
    {
      "name": "Quick Chicken Salad",
      "total_ingredients": ["chicken breast", "lettuce", "tomatoes", "onions", "mayonnaise", "salt", "pepper"],
      "available_ingredients": ["chicken breast", "lettuce", "tomatoes", "onions", "mayonnaise"],
      "missing_ingredients": ["salt", "pepper"],
      "completeness_score": 71,
      "instructions": ["Step 1...", "Step 2..."],
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  "analysis": [
    {
      "recipe_name": "Quick Chicken Salad",
      "completeness": 71,
      "available_count": 5,
      "missing_count": 2,
      "total_ingredients": 7,
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  "ingredient_count": 10
}
```

## Project Structure
```
kitchen-copilot/
├── .env                                                  # Environment variables
├── backend/                                              # Backend directory
│   ├── main.py                                           # Main entry point
│   ├── config.py                                         # Configuration and environment loading
│   ├── utils/                                            # Utility functions
│   │   └── image_utils.py                                # Image handling utilities
│   ├── services/                                         # Core services
│   │   ├── azure_openai_client.py                        # Azure OpenAI API client
│   │   ├── azure_blob_service.py                         # Azure Blob Storage service
│   │   ├── vision_service.py                             # Image analysis service
│   │   └── recipe_service.py                             # Recipe generation service
│   ├── models/                                           # Data models
│   │   ├── ingredients.py                                # Ingredients data model
│   │   └── recipes.py                                    # Recipes data model
│   ├── prompts/                                          # Prompt templates
│   │   ├── vision_prompt.py                              # Image analysis prompt
│   │   └── recipe_prompt.py                              # Recipe generation prompt
│   └── api/                                              # API endpoints
│       └── routes.py                                     # Flask routes
└── kitchen-copilot-frontend/                             # Next.js frontend application
    ├── src/                                              # Frontend source code
    │   ├── app/                                          # Next.js app router pages
    │   ├── components/                                   # React components
    │   ├── lib/                                          # Utility functions and API client
    │   └── types/                                        # TypeScript type definitions
    ├── public/                                           # Static assets
    └── package.json                                      # Frontend dependencies
```

## Troubleshooting

### API Connection Issues
- Verify that the backend API is running on the correct host and port
- Check that `NEXT_PUBLIC_API_URL` in the frontend's `.env.local` matches the backend URL
- Try accessing the API directly in the browser (e.g., http://localhost:5000/ingredients)


--- assets/ImageUpload.png ---
[Binary file]

--- assets/Ingredients.png ---
[Binary file]

--- assets/Recipes.png ---
[Binary file]

--- backend/api/routes.py ---
"""
API Routes - Flask routes for the Kitchen Copilot application

This module preserves the exact API interface expected by the frontend,
while using Flask instead of FastAPI for implementation.
"""

from flask import Blueprint, request, jsonify

# Create a Blueprint instead of a Flask app
app = Blueprint('api', __name__)

# Store references to services initialized in main.py
vision_service = None
recipe_service = None
azure_blob_service = None
config = None

@app.route('/analyze-image', methods=['POST'])
def analyze_image():
    """
    Analyze a fridge/food image and identify ingredients
    
    Returns:
        Analysis result or processing status
    """
    try:
        # Check if file was uploaded
        if 'file' not in request.files:
            return jsonify({"error": "No file part in the request"}), 400
            
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
            
        # Get file paths for Azure Blob Storage
        paths = config.get_file_paths(file.filename)
        
        # Read the file into memory
        file_bytes = file.read()
        
        # Upload the image to Azure Blob Storage
        azure_blob_service.upload_file(file_bytes, paths["request_image"])
        
        # Process image from the uploaded bytes
        result = vision_service.analyze_image_bytes(file_bytes)
        
        # Save analysis to Azure Blob Storage
        vision_service.save_analysis(result, paths["vision_output"])
        
        # Get a summary
        summary = vision_service.get_ingredients_summary(result)
        
        # Include request_id and just the image filename (not the full path)
        request_id = paths["request_id"]
        image_filename = paths["request_image"].split('/')[-1]
        
        return jsonify({
            "status": "complete",
            "result": result,
            "summary": summary,
            "image_filename": image_filename,
            "request_id": request_id
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/ingredients', methods=['GET'])
def get_ingredients():
    """
    Get ingredients for the specified request ID
    
    Returns:
        Ingredients data
    """
    try:
        # Get request ID (folder name) from query parameter
        request_id = request.args.get('request_id')
        
        if not request_id:
            return jsonify({
                "error": "Missing required parameter: request_id. Please specify a request_id to retrieve ingredients."
            }), 400
        
        try:
            # Get paths using the request_id
            paths = config.get_file_paths(request_id=request_id)
            ingredients_blob = paths["vision_output"]
        except ValueError as e:
            return jsonify({"error": str(e)}), 404
        
        # Check if blob exists
        if not azure_blob_service.blob_exists(ingredients_blob):
            return jsonify({
                "error": f"No ingredients file found for request_id: {request_id}"
            }), 404
        
        # Load and return the ingredients from Azure Blob Storage
        ingredients_data = azure_blob_service.download_json(ingredients_blob)
        return jsonify(ingredients_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/recipes', methods=['GET'])
def get_recipes():
    """
    Get recipes for the specified request ID
    
    Returns:
        Recipes data
    """
    try:
        # Get request ID (folder name) from query parameter
        request_id = request.args.get('request_id')
        
        if not request_id:
            return jsonify({
                "error": "Missing required parameter: request_id. Please specify a request_id to retrieve recipes."
            }), 400
        
        try:
            # Get paths using the request_id
            paths = config.get_file_paths(request_id=request_id)
            recipes_blob = paths["recipes_output"]
        except ValueError as e:
            return jsonify({"error": str(e)}), 404
        
        # Check if blob exists
        if not azure_blob_service.blob_exists(recipes_blob):
            return jsonify({
                "error": f"No recipes file found for request_id: {request_id}"
            }), 404
        
        # Load and return the recipes from Azure Blob Storage
        recipes_data = azure_blob_service.download_json(recipes_blob)
        return jsonify(recipes_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/generate-recipes', methods=['POST'])
def generate_recipes():
    """
    Generate recipe suggestions based on available ingredients for the specified request ID
    
    Returns:
        Generated recipes
    """
    try:
        # Parse request data
        data = request.get_json() or {}
        num_recipes = data.get('num_recipes', 5)
        request_id = data.get('request_id')
        
        if not request_id:
            return jsonify({
                "error": "Missing required parameter: request_id. Please specify a request_id to generate recipes."
            }), 400
        
        try:
            # Get paths using the request_id
            paths = config.get_file_paths(request_id=request_id)
            ingredients_blob = paths["vision_output"]
            recipes_blob = paths["recipes_output"]
        except ValueError as e:
            return jsonify({"error": str(e)}), 404
        
        # Check if ingredients blob exists
        if not azure_blob_service.blob_exists(ingredients_blob):
            return jsonify({
                "error": f"No ingredients file found for request_id: {request_id}"
            }), 404
        
        # Load ingredients from Azure Blob Storage
        ingredients = recipe_service.load_ingredients(ingredients_blob)
        
        # Generate recipes
        recipes_data = recipe_service.generate_recipes(
            ingredients, 
            num_recipes=num_recipes
        )
        
        # Get analysis
        analysis = recipe_service.get_recipes_analysis(recipes_data)
        analysis_dict = analysis.to_dict('records') if analysis is not None else []
        
        # Create full response
        full_response = {
            "items": recipes_data["recipes"],
            "analysis": analysis_dict,
            "ingredient_count": len(ingredients)
        }
        
        # Save the full response to Azure Blob Storage
        recipe_service.save_recipes(full_response, recipes_blob)
        
        return jsonify(full_response)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

--- backend/config.py ---
"""
Configuration module - Handles environment variables and configuration
"""

import os
import time
from dotenv import load_dotenv

class Config:
    """Configuration class that loads and provides access to environment variables"""
    
    def __init__(self):
        """Initialize configuration by loading environment variables"""
        load_dotenv()
        # Azure OpenAI settings
        self.azure_openai_api_key = os.getenv("AZURE_OPENAI_API_KEY")
        self.azure_openai_endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
        self.api_version = os.getenv("API_VERSION")
        self.model_name = os.getenv("MODEL_NAME")
        
        # Azure Blob Storage settings
        self.azure_storage_connection_string = os.getenv("AZURE_STORAGE_CONNECTION_STRING")
        self.azure_storage_container = os.getenv("AZURE_STORAGE_CONTAINER", "container01")
    
    def get_azure_config(self):
        """Get Azure OpenAI configuration as a dictionary"""
        return {
            "api_key": self.azure_openai_api_key,
            "api_version": self.api_version,
            "endpoint": self.azure_openai_endpoint,
            "model_name": self.model_name
        }
    
    def get_azure_storage_config(self):
        """Get Azure Blob Storage configuration as a dictionary"""
        return {
            "connection_string": self.azure_storage_connection_string,
            "container_name": self.azure_storage_container
        }
    
    def get_file_paths(self, image_filename=None, request_id=None):
        """
        Get file paths for input and output files in Azure Blob Storage
        
        Args:
            image_filename: Optional image filename to create request-specific paths
            request_id: Optional request ID to retrieve existing paths
            
        Returns:
            Dictionary with paths for input and output files within Azure Blob Storage
            
        Raises:
            ValueError: If neither image_filename nor request_id is provided
        """
        if image_filename:
            # Create a timestamp and unique ID for blob naming
            timestamp = int(time.time())
            
            # Extract the unique part of the uploaded image filename or generate a new one
            if '_' in image_filename:
                unique_id = image_filename.split('_')[-1].split('.')[0]
            else:
                unique_id = os.urandom(4).hex()
                
            # Create a timestamp-based folder name
            folder_name = f"fridge_{timestamp}_{unique_id}"
            
            # Create blob paths
            image_name = f"image_{timestamp}_{unique_id}{os.path.splitext(image_filename)[1]}"
            ingredients_name = f"ingredients_{timestamp}_{unique_id}.json"
            recipes_name = f"recipes_{timestamp}_{unique_id}.json"
            
            paths = {
                "request_dir": folder_name,
                "vision_output": f"{folder_name}/{ingredients_name}",
                "recipes_output": f"{folder_name}/{recipes_name}",
                "request_image": f"{folder_name}/{image_name}",
                "request_id": folder_name
            }
        elif request_id:
            # For existing requests, construct the paths based on request_id
            id_part = request_id.split('_', 1)[1] if '_' in request_id else request_id
            
            paths = {
                "request_dir": request_id,
                "vision_output": f"{request_id}/ingredients_{id_part}.json",
                "recipes_output": f"{request_id}/recipes_{id_part}.json",
                "request_image": f"{request_id}/image_{id_part}.jpg",  # Default to .jpg
                "request_id": request_id
            }
        else:
            # No filename or request_id provided - this is an error case
            raise ValueError("Either image_filename or request_id must be provided to get file paths")
                
        return paths

--- backend/main.py ---
import argparse
from flask import Flask

# Import services and config
from config import Config
from services.azure_openai_client import AzureOpenAIClientService
from services.azure_blob_service import AzureBlobService
from services.vision_service import VisionService
from services.recipe_service import RecipeService

from flask_cors import CORS

import sys
sys.dont_write_bytecode = True

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # This enables CORS for all routes

# Global services
config = None
azure_openai_client = None
azure_blob_service = None
vision_service = None
recipe_service = None

def setup_services():
    """
    Set up the application services
    """
    global config, azure_openai_client, azure_blob_service, vision_service, recipe_service
    
    # Initialize configuration
    config = Config()
    
    # Initialize services
    azure_openai_client = AzureOpenAIClientService(config)
    
    # Initialize Azure Blob Storage service
    storage_config = config.get_azure_storage_config()
    azure_blob_service = AzureBlobService(
        connection_string=storage_config["connection_string"],
        container_name=storage_config["container_name"]
    )
    
    # Initialize vision and recipe services with blob storage
    vision_service = VisionService(azure_openai_client, azure_blob_service)
    recipe_service = RecipeService(azure_openai_client, azure_blob_service)
    
    # Import routes after Flask app is initialized
    from api.routes import app as routes_blueprint
    
    # Register blueprint with the main Flask app
    app.register_blueprint(routes_blueprint)
    
    # Provide services to routes module
    import api.routes as routes
    routes.vision_service = vision_service
    routes.recipe_service = recipe_service
    routes.azure_blob_service = azure_blob_service
    routes.config = config

def main():
    """Main entry point for the application"""
    parser = argparse.ArgumentParser(description="Kitchen Copilot API Server")
    parser.add_argument("--host", default="127.0.0.1", help="Host for API server")
    parser.add_argument("--port", type=int, default=5000, help="Port for API server")
    
    args = parser.parse_args()
    
    # Setup services
    setup_services()
    
    print(f"Starting Kitchen Copilot API server on {args.host}:{args.port}")
    app.run(host=args.host, port=args.port, debug=False)

if __name__ == "__main__":
    main()

--- backend/models/ingredients.py ---
"""
Ingredients Models - Data models for ingredients
"""

from dataclasses import dataclass
from typing import Dict, List

@dataclass
class IngredientsResult:
    """Data class representing ingredients analysis result"""
    ingredients: Dict[str, List[str]]
    
    @classmethod
    def from_dict(cls, data):
        """
        Create an IngredientsResult instance from a dictionary
        
        Args:
            data: Dictionary with ingredients by category
            
        Returns:
            IngredientsResult instance
        """
        if "ingredients" not in data:
            raise ValueError("Invalid ingredients data: 'ingredients' key not found")
        return cls(ingredients=data["ingredients"])
    
    def to_dict(self):
        """
        Convert to dictionary representation
        
        Returns:
            Dictionary with ingredients data
        """
        return {
            "ingredients": self.ingredients
        }
    
    def get_all_ingredients(self):
        """
        Get a flattened list of all ingredients
        
        Returns:
            List of all ingredients across categories
        """
        result = []
        for category_items in self.ingredients.values():
            result.extend(category_items)
        return result

--- backend/models/recipes.py ---
"""
Recipe Models - Data models for recipes
"""

from dataclasses import dataclass
from typing import List

@dataclass
class Recipe:
    """Data class representing a single recipe"""
    name: str
    total_ingredients: List[str]
    available_ingredients: List[str]
    missing_ingredients: List[str]
    completeness_score: float
    instructions: List[str]
    cooking_time: str
    difficulty: str
    
    @classmethod
    def from_dict(cls, data):
        """
        Create a Recipe instance from a dictionary
        
        Args:
            data: Dictionary with recipe data
            
        Returns:
            Recipe instance
        """
        return cls(
            name=data["name"],
            total_ingredients=data["total_ingredients"],
            available_ingredients=data["available_ingredients"],
            missing_ingredients=data["missing_ingredients"],
            completeness_score=data["completeness_score"],
            instructions=data["instructions"],
            cooking_time=data["cooking_time"],
            difficulty=data["difficulty"]
        )
    
    def to_dict(self):
        """
        Convert to dictionary representation
        
        Returns:
            Dictionary with recipe data
        """
        return {
            "name": self.name,
            "total_ingredients": self.total_ingredients,
            "available_ingredients": self.available_ingredients,
            "missing_ingredients": self.missing_ingredients,
            "completeness_score": self.completeness_score,
            "instructions": self.instructions,
            "cooking_time": self.cooking_time,
            "difficulty": self.difficulty
        }

@dataclass
class RecipeCollection:
    """Data class representing a collection of recipes"""
    recipes: List[Recipe]
    
    @classmethod
    def from_dict(cls, data):
        """
        Create a RecipeCollection instance from a dictionary
        
        Args:
            data: Dictionary with recipes data
            
        Returns:
            RecipeCollection instance
        """
        if "recipes" not in data:
            raise ValueError("Invalid recipes data: 'recipes' key not found")
            
        recipes = [Recipe.from_dict(r) for r in data["recipes"]]
        return cls(recipes=recipes)
    
    def to_dict(self):
        """
        Convert to dictionary representation
        
        Returns:
            Dictionary with recipes data
        """
        return {
            "recipes": [r.to_dict() for r in self.recipes]
        }

--- backend/prompts/recipe_prompt.py ---
"""
Recipe Generation Prompt - System prompt for the recipe generation service
"""

def get_recipe_system_prompt():
    """
    Return the system prompt for recipe generation
    
    Returns:
        String containing the system prompt
    """
    return """You are a creative chef who specializes in creating recipes based on available ingredients.
Your task is to suggest recipes that can be made with the provided ingredients.
For each recipe, you will:
1. Generate the recipe name
2. List all required ingredients (both those provided and those missing)
3. Provide detailed cooking instructions
4. Rate what percentage of necessary ingredients are available

Return your suggestions as a JSON object with the following structure:
{
  "recipes": [
    {
      "name": "Recipe Name",
      "total_ingredients": [list of all ingredients needed],
      "available_ingredients": [list of ingredients from user's inventory],
      "missing_ingredients": [list of ingredients not in user's inventory],
      "completeness_score": 85,  // percentage of available ingredients
      "instructions": ["Step 1...", "Step 2...", ...],
      "cooking_time": "30 minutes",
      "difficulty": "Easy/Medium/Hard"
    },
    ...
  ]
}
"""

--- backend/prompts/vision_prompt.py ---
"""
Vision Analysis Prompt - System prompt for the vision analysis service
"""

def get_vision_system_prompt():
    """
    Return the system prompt for fridge image analysis
    
    Returns:
        String containing the system prompt
    """
    return """You are a helpful kitchen assistant with excellent vision capabilities.
Your task is to:
1. Identify ALL food ingredients and items visible in this refrigerator/kitchen image
2. List as many ingredients as you can possibly identify
3. Be specific about each item (e.g., "fresh spinach leaves" instead of just "vegetables")
4. Organize ingredients into ONLY the following categories:
   - Dairy (milk, cheese, yogurt, butter, etc.)
   - Produce (fruits, vegetables, herbs, etc.)
   - Proteins (meat, poultry, fish, tofu, etc.)
   - Grains (bread, rice, pasta, cereals, etc.)
   - Condiments (sauces, dressings, spreads, etc.)
   - Beverages (drinks, juices, etc.)
   - Snacks (chips, cookies, nuts, etc.)
   - Frozen (ice cream, frozen meals, etc.)
   - Canned (canned vegetables, beans, soups, etc.)
   - Other (any items that don't fit the above categories)
5. Return your analysis as a JSON object with:
   - A key "ingredients" containing an object with these specific category names as keys
   - Each category should contain an array of specific ingredients
   - If a category has no items, include it with an empty array
6. Be thorough and try to identify even partially visible items
7. IMPORTANT: Use ONLY the specified categories above, do not create your own categories"""

--- backend/services/azure_blob_service.py ---
"""
Azure Blob Storage Service - Handles operations with Azure Blob Storage
"""

import json
from azure.storage.blob import BlobServiceClient, ContentSettings
from io import BytesIO

class AzureBlobService:
    """Service for interacting with Azure Blob Storage"""
    
    def __init__(self, connection_string, container_name="container01"):
        """
        Initialize the Azure Blob Storage service
        
        Args:
            connection_string: Azure Storage account connection string
            container_name: Name of the blob container (default: container01)
        """
        self.connection_string = connection_string
        self.container_name = container_name
        self.blob_service_client = BlobServiceClient.from_connection_string(connection_string)
        
        # Ensure container exists
        container_client = self.blob_service_client.get_container_client(container_name)
        if not container_client.exists():
            self.blob_service_client.create_container(container_name)
    
    def upload_file(self, file_data, blob_path):
        """
        Upload a file to Azure Blob Storage
        
        Args:
            file_data: File data as bytes or BytesIO object
            blob_path: Path within the container where the file should be stored
            
        Returns:
            URL to the uploaded blob
        """
        blob_client = self.blob_service_client.get_blob_client(
            container=self.container_name, 
            blob=blob_path
        )
        
        # Determine the content type based on file extension
        content_type = 'application/octet-stream'  # Default
        if blob_path.endswith('.jpg') or blob_path.endswith('.jpeg'):
            content_type = 'image/jpeg'
        elif blob_path.endswith('.png'):
            content_type = 'image/png'
        elif blob_path.endswith('.json'):
            content_type = 'application/json'
            
        # Upload the file with appropriate content settings
        content_settings = ContentSettings(content_type=content_type)
        
        # Ensure we have bytes for uploading
        if isinstance(file_data, BytesIO):
            file_data.seek(0)
            data = file_data.read()
        else:
            data = file_data
            
        blob_client.upload_blob(data, content_settings=content_settings, overwrite=True)
        return blob_client.url
    
    def upload_json(self, json_data, blob_path):
        """
        Upload JSON data to Azure Blob Storage
        
        Args:
            json_data: Dictionary to be serialized as JSON
            blob_path: Path within the container where the JSON should be stored
            
        Returns:
            URL to the uploaded blob
        """
        json_str = json.dumps(json_data, indent=2)
        json_bytes = json_str.encode('utf-8')
        return self.upload_file(json_bytes, blob_path)
    
    def download_file(self, blob_path):
        """
        Download a file from Azure Blob Storage
        
        Args:
            blob_path: Path to the blob within the container
            
        Returns:
            BytesIO object containing the file data
        """
        blob_client = self.blob_service_client.get_blob_client(
            container=self.container_name, 
            blob=blob_path
        )
        
        download_stream = BytesIO()
        download_stream.write(blob_client.download_blob().readall())
        download_stream.seek(0)
        
        return download_stream
    
    def download_json(self, blob_path):
        """
        Download and parse JSON data from Azure Blob Storage
        
        Args:
            blob_path: Path to the JSON blob within the container
            
        Returns:
            Parsed JSON object (dictionary)
        """
        download_stream = self.download_file(blob_path)
        json_str = download_stream.read().decode('utf-8')
        return json.loads(json_str)
    
    def list_blobs(self, prefix=None):
        """
        List blobs in the container, optionally filtered by prefix
        
        Args:
            prefix: Optional prefix to filter blobs
            
        Returns:
            List of blob names
        """
        container_client = self.blob_service_client.get_container_client(self.container_name)
        blobs = container_client.list_blobs(name_starts_with=prefix)
        return [blob.name for blob in blobs]
    
    def blob_exists(self, blob_path):
        """
        Check if a blob exists
        
        Args:
            blob_path: Path to the blob within the container
            
        Returns:
            Boolean indicating if the blob exists
        """
        blob_client = self.blob_service_client.get_blob_client(
            container=self.container_name, 
            blob=blob_path
        )
        return blob_client.exists()

--- backend/services/azure_openai_client.py ---
"""
Azure OpenAI Client Service - Handles Azure OpenAI API client initialization
"""

from openai import AzureOpenAI

class AzureOpenAIClientService:
    """Service for interacting with Azure OpenAI API"""
    
    def __init__(self, config):
        """
        Initialize the Azure OpenAI client
        
        Args:
            config: Configuration object containing Azure OpenAI credentials
        """
        azure_config = config.get_azure_config()
        self.client = AzureOpenAI(
            api_key=azure_config["api_key"],
            api_version=azure_config["api_version"],
            azure_endpoint=azure_config["endpoint"]
        )
        self.model_name = azure_config["model_name"]
        
    def get_client(self):
        """Get the initialized Azure OpenAI client"""
        return self.client
        
    def get_model_name(self):
        """Get the model name to use for API calls"""
        return self.model_name

--- backend/services/recipe_service.py ---
"""
Recipe Service - Service for generating recipe suggestions based on ingredients
"""

import json
import pandas as pd
from prompts.recipe_prompt import get_recipe_system_prompt

class RecipeService:
    """Service for generating recipes based on available ingredients"""
    
    def __init__(self, azure_openai_client, azure_blob_service=None):
        """
        Initialize the Recipe Service
        
        Args:
            azure_openai_client: An initialized AzureOpenAIClientService object
            azure_blob_service: An initialized AzureBlobService object
        """
        self.client = azure_openai_client.get_client()
        self.model_name = azure_openai_client.get_model_name()
        self.azure_blob_service = azure_blob_service
    
    def load_ingredients(self, blob_path):
        """
        Load and flatten ingredients from JSON in Azure Blob Storage
        
        Args:
            blob_path: Path to the blob containing ingredients JSON
            
        Returns:
            List of ingredient strings
        """
        try:
            # Download the JSON from Azure Blob Storage
            data = self.azure_blob_service.download_json(blob_path)
            
            # Extract ingredients from the full response
            # Check if it's a full API response or just the ingredients
            if 'result' in data and 'ingredients' in data['result']:
                ingredients_data = data['result']['ingredients']
            elif 'ingredients' in data:
                ingredients_data = data['ingredients']
            else:
                raise ValueError("Could not find ingredients in the JSON file")
            
            # Flatten the ingredients list
            all_ingredients = []
            for category, items in ingredients_data.items():
                all_ingredients.extend(items)
            
            return all_ingredients
        except Exception as e:
            raise Exception(f"Error loading ingredients: {str(e)}")
    
    def generate_recipes(self, ingredients, num_recipes=5):
        """
        Generate recipe suggestions using Azure OpenAI API
        
        Args:
            ingredients: List of available ingredients
            num_recipes: Number of recipes to generate
            
        Returns:
            Dictionary containing recipe suggestions
        """
        ingredients_str = ", ".join(ingredients)
        user_prompt = f"""Here are the ingredients I have available: {ingredients_str}. 
Please suggest {num_recipes} diverse recipes that I could make with these ingredients. 
Include some recipes that use most of what I have, and some creative options that might 
require a few additional ingredients. Focus on wholesome, flavorful dishes."""

        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": get_recipe_system_prompt()},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=4000,
                response_format={"type": "json_object"}
            )
            
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            raise Exception(f"Error generating recipes: {str(e)}")
    
    def save_recipes(self, recipes_data, blob_path):
        """
        Save recipes to Azure Blob Storage
        
        Args:
            recipes_data: Recipe data (complete response)
            blob_path: Path within the container where to save the JSON
            
        Returns:
            URL to the saved JSON file
        """
        return self.azure_blob_service.upload_json(recipes_data, blob_path)
    
    def get_recipes_analysis(self, recipes_data):
        """
        Create a DataFrame with recipe analysis
        
        Args:
            recipes_data: Recipe data from generate_recipes
            
        Returns:
            DataFrame with recipe analysis or None if no recipes
        """
        # Check if recipes_data is already the full response or just the recipes
        if isinstance(recipes_data, dict) and "recipes" in recipes_data:
            recipes_list = recipes_data["recipes"]
        elif isinstance(recipes_data, dict) and "items" in recipes_data:
            recipes_list = recipes_data["items"]
        else:
            recipes_list = []
        
        if not recipes_list:
            return None
        
        return pd.DataFrame([{
            "recipe_name": r["name"],
            "completeness": r["completeness_score"],
            "available_count": len(r["available_ingredients"]),
            "missing_count": len(r["missing_ingredients"]),
            "total_ingredients": len(r["total_ingredients"]),
            "cooking_time": r["cooking_time"],
            "difficulty": r["difficulty"]
        } for r in recipes_list])

--- backend/services/vision_service.py ---
"""
Vision Service - Service for analyzing fridge/food images
"""

import json
from utils.image_utils import encode_image_from_blob, encode_image_from_bytes
from prompts.vision_prompt import get_vision_system_prompt

class VisionService:
    """Service for analyzing food/fridge images using Azure OpenAI Vision API"""
    
    def __init__(self, azure_openai_client, azure_blob_service=None):
        """
        Initialize the Vision Service
        
        Args:
            azure_openai_client: An initialized AzureOpenAIClientService object
            azure_blob_service: An initialized AzureBlobService object
        """
        self.client = azure_openai_client.get_client()
        self.model_name = azure_openai_client.get_model_name()
        self.azure_blob_service = azure_blob_service
    
    def analyze_image_bytes(self, image_bytes):
        """
        Analyze the image using Azure OpenAI Vision API
        
        Args:
            image_bytes: Image data as bytes
            
        Returns:
            Dictionary containing the analysis results
            
        Raises:
            Exception: If the API call fails or parsing fails
        """
        try:
            base64_image = encode_image_from_bytes(image_bytes)
            
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": get_vision_system_prompt()},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Please identify all the food ingredients and items in this refrigerator image. List as many as you can see and be specific about each item."},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                        ]
                    }
                ],
                max_tokens=2000,
                response_format={"type": "json_object"}
            )
            
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            raise Exception(f"Error analyzing image: {str(e)}")
    
    def analyze_image(self, blob_path):
        """
        Analyze the image from Azure Blob Storage using Azure OpenAI Vision API
        
        This method is provided for cases where you need to analyze an image
        that's already stored in Azure Blob Storage.
        
        Args:
            blob_path: Path to the blob within the container
            
        Returns:
            Dictionary containing the analysis results
            
        Raises:
            Exception: If the API call fails or parsing fails
        """
        try:
            # Download the image from Azure Blob Storage
            image_data = self.azure_blob_service.download_file(blob_path)
            base64_image = encode_image_from_blob(image_data)
            
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": get_vision_system_prompt()},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Please identify all the food ingredients and items in this refrigerator image. List as many as you can see and be specific about each item."},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                        ]
                    }
                ],
                max_tokens=2000,
                response_format={"type": "json_object"}
            )
            
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            raise Exception(f"Error analyzing image: {str(e)}")
    
    def save_analysis(self, analysis_data, blob_path):
        """
        Save the analysis result to Azure Blob Storage
        
        Args:
            analysis_data: The complete analysis data to save
            blob_path: Path within the container where to save the JSON
            
        Returns:
            URL to the saved JSON file
        """
        return self.azure_blob_service.upload_json(analysis_data, blob_path)
    
    def get_ingredients_summary(self, analysis_result):
        """
        Generate a summary of the ingredients from the analysis
        
        Args:
            analysis_result: The analysis result from analyze_image
            
        Returns:
            Dictionary with summary statistics
        """
        if "ingredients" not in analysis_result:
            return {
                "total_count": 0,
                "categories": 0,
                "by_category": {}
            }
        
        categories = analysis_result["ingredients"]
        by_category = {category: len(items) for category, items in categories.items()}
        total_count = sum(by_category.values())
        
        return {
            "total_count": total_count,
            "categories": len(categories),
            "by_category": by_category
        }

--- backend/utils/image_utils.py ---
"""
Image Utilities - Functions for handling images with Azure Blob Storage
"""

import base64
from io import BytesIO

def encode_image_from_blob(blob_data):
    """
    Encode a blob image to base64 string
    
    Args:
        blob_data: BytesIO object containing the image data
        
    Returns:
        Base64 encoded string of the image
    """
    blob_data.seek(0)
    return base64.b64encode(blob_data.read()).decode('utf-8')

def encode_image_from_bytes(image_bytes):
    """
    Encode bytes to base64 string
    
    Args:
        image_bytes: Bytes containing the image data
        
    Returns:
        Base64 encoded string of the image
    """
    return base64.b64encode(image_bytes).decode('utf-8')

def find_image_in_container(azure_blob_service, prefix):
    """
    Find the image file in Azure Blob Storage that follows the naming pattern
    
    Args:
        azure_blob_service: Azure Blob Storage service instance
        prefix: Prefix (folder path) to search in
        
    Returns:
        Blob path to the image file or None if not found
    """
    blobs = azure_blob_service.list_blobs(prefix=prefix)
    image_blobs = [blob for blob in blobs if 'image_' in blob]
    return image_blobs[0] if image_blobs else None

--- kitchen-copilot-frontend/README.md ---
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


--- kitchen-copilot-frontend/components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

--- kitchen-copilot-frontend/eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


--- kitchen-copilot-frontend/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- kitchen-copilot-frontend/next.config.ts ---
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


--- kitchen-copilot-frontend/package.json ---
{
  "name": "kitchen-copilot-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "axios": "^1.8.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.5.0",
    "lucide-react": "^0.482.0",
    "next": "^15.2.4",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-dropzone": "^14.3.8",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.2",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


--- kitchen-copilot-frontend/postcss.config.mjs ---
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


--- kitchen-copilot-frontend/public/file.svg ---
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

--- kitchen-copilot-frontend/public/globe.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

--- kitchen-copilot-frontend/public/next.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

--- kitchen-copilot-frontend/public/vercel.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

--- kitchen-copilot-frontend/public/window.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

--- kitchen-copilot-frontend/setup.md ---
# Create Next.js app with TypeScript
npx create-next-app@latest kitchen-copilot-frontend --typescript --tailwind --eslint --app --src-dir

# Navigate to the project
cd kitchen-copilot-frontend

# Install shadcn UI
npx shadcn@latest init

# Install required dependencies
npm install axios sonner react-dropzone clsx

# Install shadcn components we'll need
npx shadcn@latest add button card tabs alert dialog separator progress avatar

# Create our directory structure
mkdir -p src/components/ui
mkdir -p src/components/kitchen
mkdir -p src/lib
mkdir -p src/types
mkdir -p src/app/api

--- kitchen-copilot-frontend/src/app/demo/page.tsx ---
'use client';

import React, { useState } from 'react';
import { IngredientsDisplay } from '@/components/kitchen/IngredientsDisplay';
import { RecipesDisplay } from '@/components/kitchen/RecipesDisplay';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Toaster } from 'sonner';
import { IngredientsResponse, RecipesResponse } from '@/types';
import { motion } from 'framer-motion';

// Sample data for demo purposes
const sampleIngredientsData: IngredientsResponse = {
  status: "complete",
  result: {
    ingredients: {
      "Dairy": [
        "Hellmann's mayonnaise",
        "Philadelphia cream cheese",
        "Land O Lakes butter"
      ],
      "Produce": [
        "Bananas",
        "Pears",
        "Apples",
        "Mixed bell peppers (red, yellow, green)",
        "Oranges",
        "Lemons",
        "Limes",
        "Cilantro",
        "Fresh basil",
        "Arugula",
        "Red cabbage",
        "Carrots",
        "Zucchini"
      ],
      "Proteins": [
        "Eggs"
      ],
      "Grains": [
        "Tortillas"
      ],
      "Condiments": [
        "Heinz tomato ketchup",
        "Hellmann's mayonnaise",
        "Organic maple syrup",
        "Annies mustard",
        "Soy sauce",
        "Horseradish",
        "Pickled onions"
      ],
      "Beverages": [
        "White wine (visible on the door)"
      ],
      "Snacks": [],
      "Frozen": [],
      "Canned": [],
      "Other": [
        "Pasta sauce",
        "Almonds",
        "Sunflower seeds",
        "Dates",
        "Pickles"
      ]
    }
  },
  summary: {
    total_count: 31,
    categories: 10,
    by_category: {
      "Dairy": 3,
      "Produce": 13,
      "Proteins": 1,
      "Grains": 1,
      "Condiments": 7,
      "Beverages": 1,
      "Snacks": 0,
      "Frozen": 0,
      "Canned": 0,
      "Other": 5
    }
  },
  image_filename: "fridge_069ea673.jpg",
  request_id: "fridge_069ea673"
};

const sampleRecipesData: RecipesResponse = {
  items: [
    {
      "name": "Mediterranean Veggie Tortilla Wrap",
      "total_ingredients": [
        "Tortillas",
        "Mixed bell peppers",
        "Red cabbage",
        "Carrots",
        "Zucchini",
        "Fresh basil",
        "Hellmann's mayonnaise",
        "Philadelphia cream cheese",
        "Annies mustard",
        "Lemons",
        "Cilantro"
      ],
      "available_ingredients": [
        "Tortillas",
        "Mixed bell peppers",
        "Red cabbage",
        "Carrots",
        "Zucchini",
        "Fresh basil",
        "Hellmann's mayonnaise",
        "Philadelphia cream cheese",
        "Annies mustard",
        "Lemons",
        "Cilantro"
      ],
      "missing_ingredients": [],
      "completeness_score": 100,
      "instructions": [
        "Step 1: Thinly slice the mixed bell peppers, red cabbage, carrots, and zucchini.",
        "Step 2: In a bowl, mix Hellmann's mayonnaise, Philadelphia cream cheese, a squeeze of lemon juice, and a teaspoon of Annies mustard.",
        "Step 3: Spread the mixture on tortillas. Layer with sliced vegetables and sprinkle fresh basil and cilantro before rolling the wrap.",
        "Step 4: Roll tightly and serve immediately."
      ],
      "cooking_time": "20 minutes",
      "difficulty": "Easy"
    },
    {
      "name": "Creamy Lemon Cilantro Pasta",
      "total_ingredients": [
        "Pasta",
        "Philadelphia cream cheese",
        "Cilantro",
        "Lemons",
        "White wine",
        "Red bell peppers",
        "Land O Lakes butter",
        "Salt",
        "Pepper"
      ],
      "available_ingredients": [
        "Philadelphia cream cheese",
        "Cilantro",
        "Lemons",
        "White wine",
        "Land O Lakes butter"
      ],
      "missing_ingredients": [
        "Pasta",
        "Red bell peppers",
        "Salt",
        "Pepper"
      ],
      "completeness_score": 62,
      "instructions": [
        "Step 1: Cook pasta according to package instructions, drain and set aside.",
        "Step 2: In a pan, melt butter and sauté diced red bell peppers until soft.",
        "Step 3: Add Philadelphia cream cheese, a splash of white wine, and juice of a lemon, stir to combine.",
        "Step 4: Toss the pasta in the sauce, season with salt and pepper, and sprinkle with chopped cilantro before serving."
      ],
      "cooking_time": "25 minutes",
      "difficulty": "Medium"
    },
    {
      "name": "Zucchini and Bell Pepper Stir Fry",
      "total_ingredients": [
        "Zucchini",
        "Mixed bell peppers",
        "Soy sauce",
        "Garlic",
        "Limes",
        "Cilantro",
        "Sunflower seeds"
      ],
      "available_ingredients": [
        "Zucchini",
        "Mixed bell peppers",
        "Soy sauce",
        "Limes",
        "Cilantro",
        "Sunflower seeds"
      ],
      "missing_ingredients": [
        "Garlic"
      ],
      "completeness_score": 87,
      "instructions": [
        "Step 1: Slice zucchini and bell peppers into strips.",
        "Step 2: Heat a pan and toast sunflower seeds lightly, then set aside.",
        "Step 3: In the same pan, add soy sauce and lime juice, then stir-fry zucchini and bell peppers for 5 minutes.",
        "Step 4: Add minced garlic, continue stirring for 2 more minutes.",
        "Step 5: Garnish with cilantro and toasted sunflower seeds before serving."
      ],
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  analysis: [
    {
      "recipe_name": "Mediterranean Veggie Tortilla Wrap",
      "completeness": 100,
      "available_count": 11,
      "missing_count": 0,
      "total_ingredients": 11,
      "cooking_time": "20 minutes",
      "difficulty": "Easy"
    },
    {
      "recipe_name": "Creamy Lemon Cilantro Pasta",
      "completeness": 62,
      "available_count": 5,
      "missing_count": 4,
      "total_ingredients": 9,
      "cooking_time": "25 minutes",
      "difficulty": "Medium"
    },
    {
      "recipe_name": "Zucchini and Bell Pepper Stir Fry",
      "completeness": 87,
      "available_count": 6,
      "missing_count": 1,
      "total_ingredients": 7,
      "cooking_time": "15 minutes",
      "difficulty": "Easy"
    }
  ],
  ingredient_count: 31
};

// Animation variants
const fadeInUp = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.5 }
  },
  exit: { 
    opacity: 0, 
    y: -20,
    transition: { duration: 0.3 }
  }
};

const staggerContainer = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

export default function DemoPage() {
  const [activeTab, setActiveTab] = useState('ingredients');
  const [loading, setLoading] = useState(false);

  const handleGenerateRecipes = () => {
    setLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      setActiveTab('recipes');
      setLoading(false);
    }, 1500);
  };

  return (
    <motion.main 
      className="flex min-h-screen flex-col light:bg-gray-50"
      initial="hidden"
      animate="visible"
      variants={staggerContainer}
    >
      <div className="container mx-auto px-4 py-8">
        <motion.div 
          className="bg-amber-50 border border-amber-200 dark:bg-gray-800 dark:border-amber-400 rounded-md p-4 mb-6"
          variants={fadeInUp}
        >
          <p className="light:text-amber-800">
            <strong>Demo Mode:</strong> This page shows sample data for development and testing purposes.
          </p>
        </motion.div>
        
        <motion.div variants={fadeInUp}>
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger 
                value="ingredients" 
                disabled={loading}
              >
                Sample Ingredients
              </TabsTrigger>
              <TabsTrigger 
                value="recipes" 
                disabled={loading}
              >
                Sample Recipes
              </TabsTrigger>
            </TabsList>

            <TabsContent value="ingredients" className="space-y-8">
              <IngredientsDisplay 
                ingredientsData={sampleIngredientsData} 
                onGenerateRecipes={handleGenerateRecipes}
                loading={loading}
              />
            </TabsContent>

            <TabsContent value="recipes" className="space-y-8">
              <RecipesDisplay recipesData={sampleRecipesData} />
            </TabsContent>
          </Tabs>
        </motion.div>
      </div>

      <Toaster position="top-center" />
    </motion.main>
  );
}

--- kitchen-copilot-frontend/src/app/favicon.ico ---
[Binary file]

--- kitchen-copilot-frontend/src/app/fridge-app/page.tsx ---
'use client';

import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ImageUpload } from '@/components/kitchen/ImageUpload';
import { IngredientsDisplay } from '@/components/kitchen/IngredientsDisplay';
import { RecipesDisplay } from '@/components/kitchen/RecipesDisplay';
import { generateRecipes } from '@/lib/api-client';
import { IngredientsResponse, RecipesResponse } from '@/types';
import { toast } from 'sonner';
import { Toaster } from 'sonner';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

export default function AppPage() {
  const [activeTab, setActiveTab] = useState('upload');
  const [ingredientsData, setIngredientsData] = useState<IngredientsResponse | null>(null);
  const [recipesData, setRecipesData] = useState<RecipesResponse | null>(null);
  const [loading, setLoading] = useState(false);

  const handleAnalysisComplete = (result: IngredientsResponse) => {
    setIngredientsData(result);
    setActiveTab('ingredients');
  };

  const handleUploadStart = () => {
    // Reset everything when starting a new upload
    setIngredientsData(null);
    setRecipesData(null);
  };

  const handleGenerateRecipes = async () => {
    if (!ingredientsData?.request_id) {
      toast.error('No ingredients analysis found');
      return;
    }

    try {
      setLoading(true);
      const recipes = await generateRecipes(ingredientsData.request_id, 5);
      setRecipesData(recipes);
      setActiveTab('recipes');
      toast.success('Recipes generated successfully!');
    } catch (error) {
      toast.error('Failed to generate recipes');
      console.error('Recipe generation error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleStartOver = () => {
    setActiveTab('upload');
    setIngredientsData(null);
    setRecipesData(null);
  };

  return (
    <div className=" py-8">
      <div className="container mx-auto px-4">
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Kitchen Copilot Tool</CardTitle>
            <CardDescription>Upload a photo of your fridge to get recipe suggestions</CardDescription>
          </CardHeader>
          <CardContent>
            <p>Use this tool to analyze your refrigerator contents and receive personalized recipe suggestions based on what you have available.</p>
          </CardContent>
        </Card>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger 
              value="upload" 
              disabled={loading}
            >
              Upload Photo
            </TabsTrigger>
            <TabsTrigger 
              value="ingredients" 
              disabled={!ingredientsData || loading}
            >
              Ingredients
            </TabsTrigger>
            <TabsTrigger 
              value="recipes" 
              disabled={!recipesData || loading}
            >
              Recipes
            </TabsTrigger>
          </TabsList>

          <TabsContent value="upload" className="space-y-8">
            <div className="max-w-xl mx-auto">
              <div className="text-center mb-8 space-y-2">
                <h2 className="text-2xl font-bold">Upload a Photo of Your Fridge</h2>
                <p className="text-muted-foreground">
                  Our AI will analyze the contents and suggest recipes you can make
                </p>
              </div>

              <ImageUpload 
                onAnalysisComplete={handleAnalysisComplete} 
                onUploadStart={handleUploadStart}
              />
            </div>
          </TabsContent>

          <TabsContent value="ingredients" className="space-y-8">
            {ingredientsData && (
              <IngredientsDisplay 
                ingredientsData={ingredientsData} 
                onGenerateRecipes={handleGenerateRecipes}
                loading={loading}
              />
            )}
          </TabsContent>

          <TabsContent value="recipes" className="space-y-8">
            {recipesData && (
              <RecipesDisplay recipesData={recipesData} />
            )}
          </TabsContent>
        </Tabs>

        {(ingredientsData || recipesData) && (
          <div className="mt-8 text-center">
            <Button variant="outline" onClick={handleStartOver}>
              Start Over
            </Button>
          </div>
        )}
      </div>

      <Toaster position="top-center" />
    </div>
  );
}

--- kitchen-copilot-frontend/src/app/globals.css ---
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


--- kitchen-copilot-frontend/src/app/layout.tsx ---
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { ThemeProvider } from "@/components/ui/theme-provider"
import { Navbar } from '@/components/Navbar';
import { Footer } from '@/components/Footer';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Kitchen Copilot - Recipe Generator',
  description: 'Analyze your refrigerator contents and get customized recipe suggestions',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
        attribute="class"
        defaultTheme="system"
        enableSystem
        disableTransitionOnChange>
          <div className="flex flex-col min-h-screen">
            <Navbar />
            <main className="flex-grow">
              {children}
            </main>
            <Footer />
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}

--- kitchen-copilot-frontend/src/app/page.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';

export default function Home() {
  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section */}
      <section className="bg-gradient-to-r py-20">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            <div className="space-y-6">
              <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight">
                Turn Your Fridge Into <span className="text-primary">Delicious Meals</span>
              </h1>
              <p className="text-xl text-gray-600">
                Kitchen Copilot uses AI to analyze your refrigerator contents and suggests personalized recipes with ingredients you already have.
              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button asChild size="lg" className="font-medium">
                  <Link href="/fridge-app">Try It Now</Link>
                </Button>
                <Button asChild variant="outline" size="lg">
                  <Link href="/demo">View Demo</Link>
                </Button>
              </div>
            </div>
            <div className="relative h-96 overflow-hidden rounded-xl shadow-xl">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-indigo-500/30 z-10 rounded-xl"></div>
              <img 
                src="https://picsum.photos/600/600" 
                alt="Kitchen Copilot" 
                className="w-full h-full object-cover rounded-xl"
              />
            </div>
          </div>
        </div>
      </section>

      {/* How It Works */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold mb-4">How It Works</h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Three simple steps to turn your available ingredients into delicious meals
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-8 h-8">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold">1. Take a Photo</h3>
              <p className="text-gray-600">
                Snap a picture of your refrigerator contents with your phone or upload an existing image.
              </p>
            </div>

            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-8 h-8">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 00-1.883 2.542l.857 6a2.25 2.25 0 002.227 1.932H19.05a2.25 2.25 0 002.227-1.932l.857-6a2.25 2.25 0 00-1.883-2.542m-16.5 0V6A2.25 2.25 0 016 3.75h3.879a1.5 1.5 0 011.06.44l2.122 2.12a1.5 1.5 0 001.06.44H18A2.25 2.25 0 0120.25 9v.776" />
                </svg>
              </div>
              <h3 className="text-xl font-bold">2. AI Analysis</h3>
              <p className="text-gray-600">
                Our AI identifies and categorizes all ingredients in your fridge with high accuracy.
              </p>
            </div>

            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mx-auto">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-8 h-8">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 8.25v-1.5m0 1.5c-1.355 0-2.697.056-4.024.166C6.845 8.51 6 9.473 6 10.608v2.513m6-4.87c1.355 0 2.697.055 4.024.165C17.155 8.51 18 9.473 18 10.608v2.513m-3-4.87v-1.5m-6 1.5v-1.5m12 9.75l-1.5.75a3.354 3.354 0 01-3 0 3.354 3.354 0 00-3 0 3.354 3.354 0 01-3 0 3.354 3.354 0 00-3 0 3.354 3.354 0 01-3 0L3 16.5m15-3.38a48.474 48.474 0 00-6-.37c-2.032 0-4.034.125-6 .37m12 0c.39.049.777.102 1.163.16 1.07.16 1.837 1.094 1.837 2.175v5.17c0 .62-.504 1.124-1.125 1.124H4.125A1.125 1.125 0 013 20.625v-5.17c0-1.08.768-2.014 1.837-2.174A47.78 47.78 0 016 13.12M12.265 3.11a.375.375 0 11-.53 0L12 2.845l.265.265zm-3 0a.375.375 0 11-.53 0L9 2.845l.265.265zm6 0a.375.375 0 11-.53 0L15 2.845l.265.265z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold">3. Get Recipes</h3>
              <p className="text-gray-600">
                Receive personalized recipe suggestions based on what you have available.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Features */}
      <section className="py-20 light:bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold mb-4">Why Choose Kitchen Copilot</h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Our intelligent recipe assistant brings value to your kitchen experience
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <Card>
              <CardHeader>
                <CardTitle>Reduce Food Waste</CardTitle>
              </CardHeader>
              <CardContent>
                <p>Use ingredients before they expire with targeted recipe suggestions, helping you minimize food waste and save money.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Save Time Planning</CardTitle>
              </CardHeader>
              <CardContent>
                <p>Eliminate the stress of meal planning with instant recipe ideas based on what's already in your kitchen.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Dietary Preferences</CardTitle>
              </CardHeader>
              <CardContent>
                <p>Filter recipe suggestions based on dietary needs or preferences for a personalized cooking experience.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>High Accuracy</CardTitle>
              </CardHeader>
              <CardContent>
                <p>Our advanced AI accurately identifies ingredients even in cluttered refrigerators with various packaging types.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Quick Analysis</CardTitle>
              </CardHeader>
              <CardContent>
                <p>Get results in seconds - our system analyzes your photo and provides recipe suggestions almost instantly.</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Recipe Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p>View complete instructions, cooking times, difficulty levels, and ingredient completeness scores for each recipe.</p>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold mb-4">What Our Users Say</h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Join thousands of satisfied home cooks using Kitchen Copilot
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <Card className="light:bg-white">
              <CardContent className="pt-6">
                <div className="flex items-center gap-2 mb-4">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <svg key={star} className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                <p className=" mb-4">
                  "Kitchen Copilot has revolutionized our weeknight dinners. Instead of ordering takeout, we now use what we have to make creative meals. It's saved us money and reduced our food waste dramatically."
                </p>
                <div className="font-medium">- Sarah T., New York</div>
              </CardContent>
            </Card>

            <Card className="light:bg-white">
              <CardContent className="pt-6">
                <div className="flex items-center gap-2 mb-4">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <svg key={star} className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                <p className=" mb-4">
                  "As a busy parent, meal planning was always stressful. With Kitchen Copilot, I snap a pic of the fridge and have dinner ideas in seconds. The kids love the variety of meals we're making now!"
                </p>
                <div className="font-medium">- Michael R., Chicago</div>
              </CardContent>
            </Card>

            <Card className="light:bg-white">
              <CardContent className="pt-6">
                <div className="flex items-center gap-2 mb-4">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <svg key={star} className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                <p className=" mb-4">
                  "The accuracy of ingredient recognition is impressive! Even with a messy fridge, it identifies almost everything correctly. The recipe quality is excellent - restaurant worthy meals from what I already had."
                </p>
                <div className="font-medium">- Jamie L., San Francisco</div>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA */}
      <section className="py-20 bg-primary/5">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-6">
            Ready to Transform Your Cooking Experience?
          </h2>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Join thousands of home cooks who use Kitchen Copilot to reduce food waste and enjoy delicious, personalized recipes.
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Button asChild size="lg" className="font-medium">
              <Link href="/fridge-app">Try It Now</Link>
            </Button>
            <Button asChild variant="outline" size="lg">
              <Link href="/demo">View Demo</Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  );
}

--- kitchen-copilot-frontend/src/components/Footer.tsx ---
import React from 'react';
import Link from 'next/link';
import { Separator } from '@/components/ui/separator';

export function Footer() {
  return (
    <footer className="bg-background border-t">
      <div className="container py-8 md:py-12 px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-primary"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
                />
              </svg>
              <Link href="/" className="text-xl font-bold">
                Kitchen Copilot
              </Link>
            </div>
            <p className="text-sm text-muted-foreground">
              Transform your cooking experience with AI-powered recipe suggestions based on what's in your fridge.
            </p>
          </div>
          <div>
            <h3 className="font-medium mb-3">Product</h3>
            <div className="space-y-2">
              <Link href="/features" className="block text-sm text-muted-foreground hover:text-foreground">
                Features
              </Link>
              <Link href="/pricing" className="block text-sm text-muted-foreground hover:text-foreground">
                Pricing
              </Link>
              <Link href="/fridge-app" className="block text-sm text-muted-foreground hover:text-foreground">
                Try Now
              </Link>
            </div>
          </div>
          <div>
            <h3 className="font-medium mb-3">Company</h3>
            <div className="space-y-2">
              <Link href="/about" className="block text-sm text-muted-foreground hover:text-foreground">
                About Us
              </Link>
              <Link href="/contact" className="block text-sm text-muted-foreground hover:text-foreground">
                Contact
              </Link>
              <Link href="/careers" className="block text-sm text-muted-foreground hover:text-foreground">
                Careers
              </Link>
            </div>
          </div>
          <div>
            <h3 className="font-medium mb-3">Legal</h3>
            <div className="space-y-2">
              <Link href="/privacy" className="block text-sm text-muted-foreground hover:text-foreground">
                Privacy Policy
              </Link>
              <Link href="/terms" className="block text-sm text-muted-foreground hover:text-foreground">
                Terms of Service
              </Link>
            </div>
          </div>
        </div>
        <Separator className="my-8" />
        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <p className="text-sm text-muted-foreground">
            © {new Date().getFullYear()} Kitchen Copilot. All rights reserved.
          </p>
          <div className="flex gap-4">
            <Link href="#" className="text-muted-foreground hover:text-foreground">
              <svg
                className="h-5 w-5"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"
                  clipRule="evenodd"
                />
              </svg>
            </Link>
            <Link href="#" className="text-muted-foreground hover:text-foreground">
              <svg
                className="h-5 w-5"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
              </svg>
            </Link>
            <Link href="#" className="text-muted-foreground hover:text-foreground">
              <svg
                className="h-5 w-5"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z"
                  clipRule="evenodd"
                />
              </svg>
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
}

--- kitchen-copilot-frontend/src/components/MobileNav.tsx ---
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { Menu } from 'lucide-react';

export function MobileNav() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon">
          <Menu className="h-6 w-6" />
        </Button>
      </SheetTrigger>
      <SheetContent side="right">
        <SheetHeader>
          <SheetTitle>Kitchen Copilot</SheetTitle>
        </SheetHeader>
        <div className="flex flex-col gap-4 py-4">
          <Link
            href="/"
            onClick={() => setIsOpen(false)}
            className="px-2 py-1 text-lg font-medium"
          >
            Home
          </Link>
          <Link
            href="/app"
            onClick={() => setIsOpen(false)}
            className="px-2 py-1 text-lg font-medium"
          >
            App
          </Link>
          <Link
            href="/features"
            onClick={() => setIsOpen(false)}
            className="px-2 py-1 text-lg font-medium"
          >
            Features
          </Link>
          <Link
            href="/about"
            onClick={() => setIsOpen(false)}
            className="px-2 py-1 text-lg font-medium"
          >
            About
          </Link>
          <div className="mt-4">
            <Link href="/app" onClick={() => setIsOpen(false)}>
              <Button className="w-full">Try Now</Button>
            </Link>
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}

--- kitchen-copilot-frontend/src/components/Navbar.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import { MobileNav } from './MobileNav';
import { ThemeToggle } from './ui/theme-toggle';

export function Navbar() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between">
        <div className="flex items-center gap-2 px-4">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-8 w-8 text-primary"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
            />
          </svg>
          <Link href="/" className="text-xl font-bold">
            Kitchen Copilot
          </Link>
        </div>

        <div className="hidden md:flex">
          <NavigationMenu>
            <NavigationMenuList>
              <NavigationMenuItem>
                <Link href="/" legacyBehavior passHref>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    Home
                  </NavigationMenuLink>
                </Link>
              </NavigationMenuItem>
              <NavigationMenuItem>
                <Link href="/fridge-app" legacyBehavior passHref>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    App
                  </NavigationMenuLink>
                </Link>
              </NavigationMenuItem>
              <NavigationMenuItem>
                <NavigationMenuTrigger>Features</NavigationMenuTrigger>
                <NavigationMenuContent>
                  <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]">
                    <li className="row-span-3">
                      <Link href="/features" legacyBehavior passHref>
                        <NavigationMenuLink className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-primary/50 to-primary p-6 no-underline outline-none focus:shadow-md">
                          <div className="mb-2 mt-4 text-lg font-medium text-white">
                            Kitchen Copilot Features
                          </div>
                          <p className="text-sm leading-tight text-white/90">
                            Transform your kitchen experience with AI-powered recipe suggestions
                          </p>
                        </NavigationMenuLink>
                      </Link>
                    </li>
                    <li>
                      <Link href="/features/ingredients" legacyBehavior passHref>
                        <NavigationMenuLink className="block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground">
                          <div className="text-sm font-medium leading-none">Ingredient Detection</div>
                          <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
                            AI-powered detection of ingredients from images
                          </p>
                        </NavigationMenuLink>
                      </Link>
                    </li>
                    <li>
                      <Link href="/features/recipes" legacyBehavior passHref>
                        <NavigationMenuLink className="block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground">
                          <div className="text-sm font-medium leading-none">Recipe Generation</div>
                          <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
                            Get personalized recipes based on your available ingredients
                          </p>
                        </NavigationMenuLink>
                      </Link>
                    </li>
                  </ul>
                </NavigationMenuContent>
              </NavigationMenuItem>
              <NavigationMenuItem>
                <Link href="/about" legacyBehavior passHref>
                  <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                    About
                  </NavigationMenuLink>
                </Link>
              </NavigationMenuItem>
            </NavigationMenuList>
          </NavigationMenu>
        </div>

        <div className="flex items-center gap-4">
          <div className="hidden md:block">
            <Link href="/fridge-app" passHref>
              <Button>Try Now</Button>
            </Link>
            <ThemeToggle />
          </div>
          <div className="md:hidden">
            <MobileNav />
          </div>
        </div>
      </div>
    </header>
  );
}

--- kitchen-copilot-frontend/src/components/kitchen/ImageUpload.tsx ---
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { analyzeImage } from '@/lib/api-client';
import { IngredientsResponse } from '@/types';
import { toast } from 'sonner';

interface ImageUploadProps {
  onAnalysisComplete: (result: IngredientsResponse) => void;
  onUploadStart: () => void;
}

export function ImageUpload({ onAnalysisComplete, onUploadStart }: ImageUploadProps) {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [previewImage, setPreviewImage] = useState<string | null>(null);

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return;

    const file = acceptedFiles[0];
    
    // Create a preview URL
    const previewUrl = URL.createObjectURL(file);
    setPreviewImage(previewUrl);
    
    // Clean up function to revoke the object URL when done
    return () => URL.revokeObjectURL(previewUrl);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/jpeg': ['.jpg', '.jpeg'],
      'image/png': ['.png'],
    },
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!previewImage) {
      toast.error('Please select an image first');
      return;
    }

    try {
      onUploadStart();
      setUploading(true);
      
      // Simulate progress for better UX (actual upload might be faster/slower)
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => {
          const newProgress = prev + 10;
          if (newProgress >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return newProgress;
        });
      }, 300);

      // Get the original file from the file input
      const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
      if (!fileInput.files || fileInput.files.length === 0) {
        throw new Error('No file selected');
      }

      const file = fileInput.files[0];
      const result = await analyzeImage(file);
      
      // Complete the progress bar
      clearInterval(progressInterval);
      setUploadProgress(100);
      
      onAnalysisComplete(result);
      
      toast.success('Image analyzed successfully!');
    } catch (error) {
      toast.error('Failed to analyze image. Please try again.');
      console.error('Upload error:', error);
    } finally {
      setUploading(false);
      setUploadProgress(0); // Reset progress
    }
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardContent className="pt-6">
          <div
            {...getRootProps()}
            className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
              isDragActive ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-primary/50'
            }`}
          >
            <input {...getInputProps()} />
            {previewImage ? (
              <div className="space-y-4">
                <div className="relative mx-auto max-w-xs">
                  <img 
                    src={previewImage} 
                    alt="Preview" 
                    className="mx-auto max-h-56 rounded-md object-contain" 
                  />
                </div>
                <p className="text-sm text-muted-foreground">
                  Click or drag to replace
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                <div className="flex justify-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-12 w-12 text-gray-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1}
                      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold">Drag & drop your fridge photo</h3>
                <p className="text-sm text-muted-foreground">
                  or click to browse files (JPEG, PNG)
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {uploading && (
        <div className="space-y-2">
          <Progress value={uploadProgress} className="h-2" />
          <p className="text-xs text-center text-muted-foreground">
            Analyzing your ingredients...
          </p>
        </div>
      )}

      <Button 
        onClick={handleUpload} 
        disabled={!previewImage || uploading} 
        className="w-full"
      >
        {uploading ? 'Analyzing...' : 'Analyze Ingredients'}
      </Button>
    </div>
  );
}

--- kitchen-copilot-frontend/src/components/kitchen/IngredientsDisplay.tsx ---
import React, { useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { IngredientsResponse } from '@/types';
import { 
  Milk, Apple, Egg, Wheat, FlaskRound, Coffee, Cookie, 
  Snowflake, Archive, UtensilsCrossed, ChevronRight 
} from 'lucide-react';
import { motion } from 'framer-motion';
import { useInView } from 'framer-motion';

interface IngredientsDisplayProps {
  ingredientsData: IngredientsResponse;
  onGenerateRecipes: () => void;
  loading: boolean;
}

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2
    }
  }
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { 
      type: "spring", 
      stiffness: 300, 
      damping: 24 
    }
  }
};

const CardInView = ({ children, delay = 0 }: { children: React.ReactNode, delay?: number }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, amount: 0.2 });
  
  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 20 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
      transition={{ 
        duration: 0.5, 
        delay: delay,
        type: "spring", 
        stiffness: 100, 
        damping: 20 
      }}
    >
      {children}
    </motion.div>
  );
};

export function IngredientsDisplay({ 
  ingredientsData, 
  onGenerateRecipes,
  loading 
}: IngredientsDisplayProps) {
  const { result, summary } = ingredientsData;
  const categories = Object.keys(result.ingredients);

  // Helper function to get an appropriate icon for each category
  const getCategoryIcon = (category: string) => {
    switch(category) {
      case 'Dairy': return <Milk className="size-5" />;
      case 'Produce': return <Apple className="size-5" />;
      case 'Proteins': return <Egg className="size-5" />;
      case 'Grains': return <Wheat className="size-5" />;
      case 'Condiments': return <FlaskRound className="size-5" />; // Changed to FlaskRound
      case 'Beverages': return <Coffee className="size-5" />;
      case 'Snacks': return <Cookie className="size-5" />;
      case 'Frozen': return <Snowflake className="size-5" />;
      case 'Canned': return <Archive className="size-5" />;
      default: return <UtensilsCrossed className="size-5" />;
    }
  };

  // Helper function to get ingredient emoji
  const getIngredientEmoji = (ingredient: string): string => {
    const ingredientEmojiMap: { [key: string]: string } = {
      // Dairy
      'mayonnaise': '🥄',
      'cream cheese': '🧀',
      'butter': '🧈',
      // Produce
      'banana': '🍌',
      'pear': '🍐',
      'apple': '🍎',
      'pepper': '🫑',
      'orange': '🍊',
      'lemon': '🍋',
      'lime': '🍈',
      'cilantro': '🌿',
      'basil': '🌿',
      'arugula': '🥬',
      'cabbage': '🥬',
      'carrot': '🥕',
      'zucchini': '🥒',
      // Proteins
      'egg': '🥚',
      // Grains
      'tortilla': '🌮',
      // Condiments
      'ketchup': '🍅',
      'mustard': '🟡',
      'syrup': '🍯',
      'soy sauce': '🍶',
      'horseradish': '🌱',
      'pickled onion': '🧅',
      // Beverages
      'wine': '🍷',
      // Other
      'pasta': '🍝',
      'almond': '🥜',
      'sunflower': '🌻',
      'date': '📅',
      'pickle': '🥒',
    };

    // Check if any key in the map is contained in the ingredient name
    for (const [key, emoji] of Object.entries(ingredientEmojiMap)) {
      if (ingredient.toLowerCase().includes(key.toLowerCase())) {
        return emoji;
      }
    }
    
    return '•';
  };

  // Calculate if we need to show in one or two columns
  const nonEmptyCategories = categories.filter(category => 
    result.ingredients[category].length > 0
  );
  const useOneColumn = nonEmptyCategories.length <= 3;

  return (
    <motion.div 
      className="space-y-6"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <motion.div 
        className="flex justify-between items-center" 
        variants={itemVariants}
      >
        <h2 className="text-2xl font-bold">Your Ingredients</h2>
        <Badge variant="outline" className="px-3 py-1">
          {summary.total_count} items found
        </Badge>
      </motion.div>

      <div className={`grid gap-4 ${useOneColumn ? 'md:grid-cols-1' : 'md:grid-cols-2'}`}>
        {categories.map((category, categoryIndex) => {
          const ingredients = result.ingredients[category];
          if (ingredients.length === 0) return null;

          return (
            <CardInView key={category} delay={categoryIndex * 0.05}>
              <Card className="overflow-hidden transition-all hover:shadow-md">
                <CardHeader className="pb-2 border-b bg-muted/30">
                  <CardTitle className="text-lg flex items-center gap-2">
                    {getCategoryIcon(category)}
                    <span>{category}</span>
                    <Badge variant="secondary" className="ml-auto">
                      {ingredients.length}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-0">
                  <ul className="divide-y divide-border">
                    {ingredients.map((ingredient, index) => (
                      <motion.li 
                        key={index} 
                        className="p-3 flex items-center gap-2 hover:bg-muted/50 transition-colors"
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ 
                          delay: 0.2 + (index * 0.03),
                          duration: 0.2
                        }}
                      >
                        <span className="text-lg w-6 text-center">{getIngredientEmoji(ingredient)}</span>
                        <span className="text-sm flex-1">{ingredient}</span>
                        <ChevronRight className="size-4 text-muted-foreground opacity-50" />
                      </motion.li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </CardInView>
          );
        })}
      </div>

      <motion.div variants={itemVariants}>
        <Button 
          onClick={onGenerateRecipes} 
          className="w-full" 
          size="lg" 
          disabled={loading}
        >
          {loading ? 'Generating Recipes...' : 'Generate Recipe Suggestions'}
        </Button>
      </motion.div>
    </motion.div>
  );
}

--- kitchen-copilot-frontend/src/components/kitchen/RecipesDisplay.tsx ---
import React, { useState } from 'react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Recipe, RecipesResponse } from '@/types';

interface RecipesDisplayProps {
  recipesData: RecipesResponse;
}

export function RecipesDisplay({ recipesData }: RecipesDisplayProps) {
  const [selectedRecipe, setSelectedRecipe] = useState<Recipe | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case 'easy':
        return 'text-green-600';
      case 'medium':
        return 'text-amber-600';
      case 'hard':
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  };

  const getCompletenessColor = (score: number) => {
    if (score >= 90) return 'bg-green-500';
    if (score >= 70) return 'bg-emerald-500';
    if (score >= 50) return 'bg-amber-500';
    return 'bg-red-500';
  };

  const handleViewRecipe = (recipe: Recipe) => {
    setSelectedRecipe(recipe);
    setDialogOpen(true);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Recipe Suggestions</h2>
        <div className="text-sm text-muted-foreground">
          {recipesData.items.length} recipes using {recipesData.ingredient_count} ingredients
        </div>
      </div>

      <Tabs defaultValue="all" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="all">All Recipes</TabsTrigger>
          <TabsTrigger value="complete">Complete (100%)</TabsTrigger>
          <TabsTrigger value="quick">Quick Meals</TabsTrigger>
        </TabsList>
        
        <TabsContent value="all" className="mt-4">
          <div className="grid gap-4 sm:grid-cols-2">
            {recipesData.items.map((recipe, index) => (
              <RecipeCard 
                key={index} 
                recipe={recipe} 
                onViewRecipe={handleViewRecipe} 
              />
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="complete" className="mt-4">
          <div className="grid gap-4 sm:grid-cols-2">
            {recipesData.items
              .filter(recipe => recipe.completeness_score === 100)
              .map((recipe, index) => (
                <RecipeCard 
                  key={index} 
                  recipe={recipe} 
                  onViewRecipe={handleViewRecipe} 
                />
              ))}
          </div>
        </TabsContent>
        
        <TabsContent value="quick" className="mt-4">
          <div className="grid gap-4 sm:grid-cols-2">
            {recipesData.items
              .filter(recipe => {
                const minutes = parseInt(recipe.cooking_time.split(' ')[0]);
                return !isNaN(minutes) && minutes <= 20;
              })
              .map((recipe, index) => (
                <RecipeCard 
                  key={index} 
                  recipe={recipe} 
                  onViewRecipe={handleViewRecipe} 
                />
              ))}
          </div>
        </TabsContent>
      </Tabs>

      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        {selectedRecipe && (
          <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="text-xl">{selectedRecipe.name}</DialogTitle>
              <DialogDescription className="flex flex-wrap gap-2 mt-2">
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {selectedRecipe.cooking_time}
                </span>
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 ${getDifficultyColor(selectedRecipe.difficulty)}`}>
                  {selectedRecipe.difficulty}
                </span>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                  {selectedRecipe.completeness_score}% Complete
                </span>
              </DialogDescription>
            </DialogHeader>

            <div className="mt-4 space-y-6">
              <div>
                <h3 className="font-medium mb-2">Ingredients</h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <h4 className="text-sm font-medium text-green-600 mb-1">Available Ingredients</h4>
                    <ul className="space-y-1">
                      {selectedRecipe.available_ingredients.map((ingredient, idx) => (
                        <li key={idx} className="text-sm flex items-center">
                          <span className="mr-2 text-green-500">✓</span>
                          {ingredient}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {selectedRecipe.missing_ingredients.length > 0 && (
                    <div>
                      <h4 className="text-sm font-medium text-red-600 mb-1">Missing Ingredients</h4>
                      <ul className="space-y-1">
                        {selectedRecipe.missing_ingredients.map((ingredient, idx) => (
                          <li key={idx} className="text-sm flex items-center">
                            <span className="mr-2 text-red-500">✗</span>
                            {ingredient}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>

              <Separator />

              <div>
                <h3 className="font-medium mb-2">Instructions</h3>
                <ol className="space-y-3">
                  {selectedRecipe.instructions.map((step, idx) => (
                    <li key={idx} className="text-sm">
                      <span className="font-bold mr-2">{idx + 1}.</span>
                      {step.replace(/^Step \d+: /, '')}
                    </li>
                  ))}
                </ol>
              </div>
            </div>
          </DialogContent>
        )}
      </Dialog>
    </div>
  );
}

interface RecipeCardProps {
  recipe: Recipe;
  onViewRecipe: (recipe: Recipe) => void;
}

function RecipeCard({ recipe, onViewRecipe }: RecipeCardProps) {
  const totalIngredients = recipe.total_ingredients.length;
  const availableIngredients = recipe.available_ingredients.length;
  
  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg">{recipe.name}</CardTitle>
        <CardDescription className="flex flex-wrap gap-1">
          <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            {recipe.cooking_time}
          </span>
          <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            {recipe.difficulty}
          </span>
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow">
        <div className="space-y-3">
          <div className="space-y-1">
            <div className="flex justify-between text-sm">
              <span>Ingredients</span>
              <span>{availableIngredients}/{totalIngredients}</span>
            </div>
            <Progress 
              className="h-1.5" 
              value={recipe.completeness_score} 
            />
          </div>
          
          <div className="text-sm space-y-1">
            <p className="font-medium">
              {recipe.missing_ingredients.length === 0 
                ? "You have everything you need!" 
                : `Missing ${recipe.missing_ingredients.length} ingredient${recipe.missing_ingredients.length === 1 ? '' : 's'}`
              }
            </p>
            {recipe.missing_ingredients.length > 0 && (
              <p className="text-muted-foreground truncate">
                {recipe.missing_ingredients.join(', ')}
              </p>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={() => onViewRecipe(recipe)}>
          View Recipe
        </Button>
      </CardFooter>
    </Card>
  );
}

--- kitchen-copilot-frontend/src/components/ui/alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }


--- kitchen-copilot-frontend/src/components/ui/avatar.tsx ---
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }


--- kitchen-copilot-frontend/src/components/ui/badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- kitchen-copilot-frontend/src/components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }


--- kitchen-copilot-frontend/src/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[data-slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


--- kitchen-copilot-frontend/src/components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


--- kitchen-copilot-frontend/src/components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- kitchen-copilot-frontend/src/components/ui/navigation-menu.tsx ---
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


--- kitchen-copilot-frontend/src/components/ui/progress.tsx ---
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }


--- kitchen-copilot-frontend/src/components/ui/separator.tsx ---
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }


--- kitchen-copilot-frontend/src/components/ui/sheet.tsx ---
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- kitchen-copilot-frontend/src/components/ui/tabs.tsx ---
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/50 inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- kitchen-copilot-frontend/src/components/ui/theme-provider.tsx ---
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


--- kitchen-copilot-frontend/src/components/ui/theme-toggle.tsx ---
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
    >
      <Sun className="h-[1.5rem] w-[1.3rem] dark:hidden" />
      <Moon className="hidden h-5 w-5 dark:block" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}

--- kitchen-copilot-frontend/src/lib/api-client.ts ---
import axios from 'axios';
import { IngredientsResponse, RecipesResponse } from '@/types';

// Create axios instance with base configuration
const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000',
  headers: {
    'Content-Type': 'application/json',
  },
});

export async function analyzeImage(file: File): Promise<IngredientsResponse> {
  const formData = new FormData();
  formData.append('file', file);
  
  const response = await apiClient.post('/analyze-image', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });
  
  return response.data;
}

export async function getIngredients(requestId?: string): Promise<IngredientsResponse> {
  const params = requestId ? { request_id: requestId } : {};
  const response = await apiClient.get('/ingredients', { params });
  return response.data;
}

export async function generateRecipes(
  requestId?: string, 
  numRecipes: number = 5
): Promise<RecipesResponse> {
  const response = await apiClient.post('/generate-recipes', {
    request_id: requestId,
    num_recipes: numRecipes,
  });
  
  return response.data;
}

export async function getRecipes(requestId?: string): Promise<RecipesResponse> {
  const params = requestId ? { request_id: requestId } : {};
  const response = await apiClient.get('/recipes', { params });
  return response.data;
}

--- kitchen-copilot-frontend/src/lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- kitchen-copilot-frontend/src/types/index.ts ---
// Ingredients response from the API
export interface IngredientsResponse {
    status?: string;
    result: {
      ingredients: {
        [category: string]: string[];
      };
    };
    summary: {
      total_count: number;
      categories: number;
      by_category: {
        [category: string]: number;
      };
    };
    image_filename?: string;
    request_id?: string;
  }
  
  // Recipe data interface
  export interface Recipe {
    name: string;
    total_ingredients: string[];
    available_ingredients: string[];
    missing_ingredients: string[];
    completeness_score: number;
    instructions: string[];
    cooking_time: string;
    difficulty: string;
  }
  
  // Recipe analysis interface
  export interface RecipeAnalysis {
    recipe_name: string;
    completeness: number;
    available_count: number;
    missing_count: number;
    total_ingredients: number;
    cooking_time: string;
    difficulty: string;
  }
  
  // Recipes response from the API
  export interface RecipesResponse {
    items: Recipe[];
    analysis: RecipeAnalysis[];
    ingredient_count: number;
  }

--- kitchen-copilot-frontend/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- requirements.in ---
openai
python-dotenv
pandas
flask
flask-cors
azure-storage-blob

--- requirements.txt ---
annotated-types==0.7.0
anyio==4.9.0
azure-core==1.32.0
azure-storage-blob==12.25.0
blinker==1.9.0
certifi==2025.1.31
cffi==1.17.1
charset-normalizer==3.4.1
click==8.1.8
cryptography==44.0.2
distro==1.9.0
Flask==3.1.0
flask-cors==5.0.1
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
idna==3.10
isodate==0.7.2
itsdangerous==2.2.0
Jinja2==3.1.6
jiter==0.9.0
MarkupSafe==3.0.2
numpy==2.2.4
openai==1.68.2
pandas==2.2.3
pycparser==2.22
pydantic==2.10.6
pydantic_core==2.27.2
python-dateutil==2.9.0.post0
python-dotenv==1.1.0
pytz==2025.2
requests==2.32.3
six==1.17.0
sniffio==1.3.1
tqdm==4.67.1
typing_extensions==4.13.0
tzdata==2025.2
urllib3==2.3.0
Werkzeug==3.1.3


